{
  "_args": [
    [
      "piece-length@2.0.1",
      "/Users/melvinroest/Desktop/magic/doodledocs/doodledocs-app"
    ]
  ],
  "_from": "piece-length@2.0.1",
  "_id": "piece-length@2.0.1",
  "_inBundle": false,
  "_integrity": "sha512-dBILiDmm43y0JPISWEmVGKBETQjwJe6mSU9GND+P9KW0SJGUwoU/odyH1nbalOP9i8WSYuqf1lQnaj92Bhw+Ug==",
  "_location": "/bugout/piece-length",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "piece-length@2.0.1",
    "name": "piece-length",
    "escapedName": "piece-length",
    "rawSpec": "2.0.1",
    "saveSpec": null,
    "fetchSpec": "2.0.1"
  },
  "_requiredBy": [
    "/bugout/create-torrent"
  ],
  "_resolved": "https://registry.npmjs.org/piece-length/-/piece-length-2.0.1.tgz",
  "_spec": "2.0.1",
  "_where": "/Users/melvinroest/Desktop/magic/doodledocs/doodledocs-app",
  "author": "",
  "bugs": {
    "url": "https://github.com/michaelrhodes/piece-length/issues"
  },
  "description": "piece-length finds the optimal piece length for a given number of bytes. Optimal for what exactly? BitTorrent. [VuzeWiki](http://wiki.vuze.com/w/Torrent_Piece_Size) and [TorrentFreak](http://torrentfreak.com/how-to-make-the-best-torrents-081121/) have both released some examples of ideal piece lengths, and this algorithm will reproduce them.",
  "devDependencies": {
    "tape": "^4.11.0"
  },
  "homepage": "https://github.com/michaelrhodes/piece-length#readme",
  "license": "MIT",
  "main": "index.js",
  "name": "piece-length",
  "repository": {
    "type": "git",
    "url": "git://github.com/michaelrhodes/piece-length.git"
  },
  "scripts": {
    "test": "node test"
  },
  "version": "2.0.1"
}
