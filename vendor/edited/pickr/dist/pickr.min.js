/*! Pickr 1.4.5 MIT | https://github.com/Simonwep/pickr */
(function webpackUniversalModuleDefinition(root, factory) {
	if(typeof exports === 'object' && typeof module === 'object')
		module.exports = factory();
	else if(typeof define === 'function' && define.amd)
		define([], factory);
	else if(typeof exports === 'object')
		exports["Pickr"] = factory();
	else
		root["Pickr"] = factory();
})(window, function() {
return /******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, { enumerable: true, get: getter });
/******/ 		}
/******/ 	};
/******/
/******/ 	// define __esModule on exports
/******/ 	__webpack_require__.r = function(exports) {
/******/ 		if(typeof Symbol !== 'undefined' && Symbol.toStringTag) {
/******/ 			Object.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });
/******/ 		}
/******/ 		Object.defineProperty(exports, '__esModule', { value: true });
/******/ 	};
/******/
/******/ 	// create a fake namespace object
/******/ 	// mode & 1: value is a module id, require it
/******/ 	// mode & 2: merge all properties of value into the ns
/******/ 	// mode & 4: return value when already ns object
/******/ 	// mode & 8|1: behave like require
/******/ 	__webpack_require__.t = function(value, mode) {
/******/ 		if(mode & 1) value = __webpack_require__(value);
/******/ 		if(mode & 8) return value;
/******/ 		if((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;
/******/ 		var ns = Object.create(null);
/******/ 		__webpack_require__.r(ns);
/******/ 		Object.defineProperty(ns, 'default', { enumerable: true, value: value });
/******/ 		if(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));
/******/ 		return ns;
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "";
/******/
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = "./src/js/pickr.js");
/******/ })
/************************************************************************/
/******/ ({

/***/ "./package.json":
/*!**********************!*\
  !*** ./package.json ***!
  \**********************/
/*! exports provided: _from, _id, _inBundle, _integrity, _location, _phantomChildren, _requested, _requiredBy, _resolved, _shasum, _spec, _where, author, bugs, bundleDependencies, deprecated, description, devDependencies, homepage, keywords, license, main, name, repository, scripts, typings, version, default */
/***/ (function(module) {

eval("module.exports = JSON.parse(\"{\\\"_from\\\":\\\"@simonwep/pickr\\\",\\\"_id\\\":\\\"@simonwep/pickr@1.4.5\\\",\\\"_inBundle\\\":false,\\\"_integrity\\\":\\\"sha512-OWbzHbmxBctkZpMIY9ipsB/MzS1VHYKZuMI+jdThsyKnz1a0Es8IzTnQSclMk50dwgbaE5qmoxZnu+JrYKX1Ow==\\\",\\\"_location\\\":\\\"/@simonwep/pickr\\\",\\\"_phantomChildren\\\":{},\\\"_requested\\\":{\\\"type\\\":\\\"tag\\\",\\\"registry\\\":true,\\\"raw\\\":\\\"@simonwep/pickr\\\",\\\"name\\\":\\\"@simonwep/pickr\\\",\\\"escapedName\\\":\\\"@simonwep%2fpickr\\\",\\\"scope\\\":\\\"@simonwep\\\",\\\"rawSpec\\\":\\\"\\\",\\\"saveSpec\\\":null,\\\"fetchSpec\\\":\\\"latest\\\"},\\\"_requiredBy\\\":[\\\"#USER\\\",\\\"/\\\"],\\\"_resolved\\\":\\\"https://registry.npmjs.org/@simonwep/pickr/-/pickr-1.4.5.tgz\\\",\\\"_shasum\\\":\\\"a1e04b87f552c32cf2245996b5f076040699732b\\\",\\\"_spec\\\":\\\"@simonwep/pickr\\\",\\\"_where\\\":\\\"/Users/melvinroest/Desktop/magic/doodledocs/doodledocs-app\\\",\\\"author\\\":{\\\"name\\\":\\\"Simon Reinisch\\\",\\\"email\\\":\\\"trash@reinisch.io\\\"},\\\"bugs\\\":{\\\"url\\\":\\\"https://github.com/Simonwep/pickr/issues\\\"},\\\"bundleDependencies\\\":false,\\\"deprecated\\\":false,\\\"description\\\":\\\"Flat, Simple, Hackable Color-Picker.\\\",\\\"devDependencies\\\":{\\\"@babel/core\\\":\\\"^7.5.5\\\",\\\"@babel/plugin-proposal-class-properties\\\":\\\"^7.5.5\\\",\\\"@babel/plugin-proposal-object-rest-spread\\\":\\\"^7.5.5\\\",\\\"@babel/preset-env\\\":\\\"^7.5.5\\\",\\\"autoprefixer\\\":\\\"^9.6.1\\\",\\\"babel-eslint\\\":\\\"^10.0.3\\\",\\\"babel-loader\\\":\\\"^8.0.6\\\",\\\"css-loader\\\":\\\"^3.2.0\\\",\\\"eslint\\\":\\\"^6.3.0\\\",\\\"eslint-loader\\\":\\\"^3.0.0\\\",\\\"mini-css-extract-plugin\\\":\\\"^0.8.0\\\",\\\"node-sass\\\":\\\"^4.12.0\\\",\\\"optimize-css-assets-webpack-plugin\\\":\\\"^5.0.3\\\",\\\"postcss-loader\\\":\\\"^3.0.0\\\",\\\"sass-loader\\\":\\\"^8.0.0\\\",\\\"typescript\\\":\\\"^3.6.3\\\",\\\"webpack\\\":\\\"^4.41.2\\\",\\\"webpack-cleanup-plugin\\\":\\\"^0.5.1\\\",\\\"webpack-cli\\\":\\\"^3.3.9\\\",\\\"webpack-dev-server\\\":\\\"^3.8.0\\\",\\\"webpack-fix-style-only-entries\\\":\\\"^0.3.1\\\"},\\\"homepage\\\":\\\"https://github.com/Simonwep/pickr#readme\\\",\\\"keywords\\\":[\\\"ux\\\",\\\"color\\\",\\\"color-picker\\\"],\\\"license\\\":\\\"MIT\\\",\\\"main\\\":\\\"./dist/pickr.min.js\\\",\\\"name\\\":\\\"@simonwep/pickr\\\",\\\"repository\\\":{\\\"type\\\":\\\"git\\\",\\\"url\\\":\\\"git+https://github.com/Simonwep/pickr.git\\\"},\\\"scripts\\\":{\\\"build\\\":\\\"node ./scripts/build.js\\\",\\\"dev\\\":\\\"webpack-dev-server --mode development\\\",\\\"lint\\\":\\\"eslint ./src --fix\\\",\\\"test:ts\\\":\\\"tsc --target ES6 --noImplicitAny --noEmit spec/ts/index.ts\\\"},\\\"typings\\\":\\\"./types/pickr.d.ts\\\",\\\"version\\\":\\\"1.4.5\\\"}\");\n\n//# sourceURL=webpack://Pickr/./package.json?");

/***/ }),

/***/ "./src/js/libs/moveable.js":
/*!*********************************!*\
  !*** ./src/js/libs/moveable.js ***!
  \*********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Moveable; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./src/js/utils/utils.js\");\n\n\nconst clamp = v => Math.max(Math.min(v, 1), 0);\n\nfunction Moveable(opt) {\n  const that = {\n    // Assign default values\n    options: Object.assign({\n      lock: null,\n      onchange: () => 0,\n      onstop: () => 0\n    }, opt),\n\n    _keyboard(e) {\n      const {\n        type,\n        key\n      } = e; // Check to see if the Movable is focused and then move it based on arrow key inputs\n      // for improved accessibility\n\n      if (document.activeElement === options.wrapper) {\n        const {\n          lock\n        } = that.options;\n        const up = key === 'ArrowUp';\n        const right = key === 'ArrowRight';\n        const down = key === 'ArrowDown';\n        const left = key === 'ArrowLeft';\n\n        if (type === 'keydown' && (up || right || down || left)) {\n          let xm = 0;\n          let ym = 0;\n\n          if (lock === 'v') {\n            xm = up || right ? 1 : -1;\n          } else if (lock === 'h') {\n            xm = up || right ? -1 : 1;\n          } else {\n            ym = up ? -1 : down ? 1 : 0;\n            xm = left ? -1 : right ? 1 : 0;\n          }\n\n          that.update(clamp(that.cache.x + 0.01 * xm), clamp(that.cache.y + 0.01 * ym));\n        } else if (key.startsWith('Arrow')) {\n          that.options.onstop();\n          e.preventDefault();\n        }\n      }\n    },\n\n    _tapstart(evt) {\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](document, ['mouseup', 'touchend', 'touchcancel'], that._tapstop);\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](document, ['mousemove', 'touchmove'], that._tapmove); // Prevent default touch event\n\n\n      evt.preventDefault(); // Trigger\n\n      that._tapmove(evt);\n    },\n\n    _tapmove(evt) {\n      const {\n        options: {\n          lock\n        },\n        cache\n      } = that;\n      const {\n        element,\n        wrapper\n      } = options;\n      const b = wrapper.getBoundingClientRect();\n      let x = 0,\n          y = 0;\n\n      if (evt) {\n        const touch = evt && evt.touches && evt.touches[0];\n        x = evt ? (touch || evt).clientX : 0;\n        y = evt ? (touch || evt).clientY : 0; // Reset to bounds\n\n        if (x < b.left) x = b.left;else if (x > b.left + b.width) x = b.left + b.width;\n        if (y < b.top) y = b.top;else if (y > b.top + b.height) y = b.top + b.height; // Normalize\n\n        x -= b.left;\n        y -= b.top;\n      } else if (cache) {\n        x = cache.x * b.width;\n        y = cache.y * b.height;\n      }\n\n      if (lock !== 'h') {\n        element.style.left = \"calc(\".concat(x / b.width * 100, \"% - \").concat(element.offsetWidth / 2, \"px)\");\n      }\n\n      if (lock !== 'v') {\n        element.style.top = \"calc(\".concat(y / b.height * 100, \"% - \").concat(element.offsetHeight / 2, \"px)\");\n      }\n\n      that.cache = {\n        x: x / b.width,\n        y: y / b.height\n      };\n      const cx = clamp(x / wrapper.offsetWidth);\n      const cy = clamp(y / wrapper.offsetHeight);\n\n      switch (lock) {\n        case 'v':\n          return options.onchange(cx);\n\n        case 'h':\n          return options.onchange(cy);\n\n        default:\n          return options.onchange(cx, cy);\n      }\n    },\n\n    _tapstop() {\n      that.options.onstop();\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"off\"](document, ['mouseup', 'touchend', 'touchcancel'], that._tapstop);\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"off\"](document, ['mousemove', 'touchmove'], that._tapmove);\n    },\n\n    trigger() {\n      that._tapmove();\n    },\n\n    update(x = 0, y = 0) {\n      const {\n        left,\n        top,\n        width,\n        height\n      } = that.options.wrapper.getBoundingClientRect();\n\n      if (that.options.lock === 'h') {\n        y = x;\n      }\n\n      that._tapmove({\n        clientX: left + width * x,\n        clientY: top + height * y\n      });\n    },\n\n    destroy() {\n      const {\n        options,\n        _tapstart\n      } = that;\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"off\"]([options.wrapper, options.element], 'mousedown', _tapstart);\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"off\"]([options.wrapper, options.element], 'touchstart', _tapstart, {\n        passive: false\n      });\n    }\n\n  }; // Initilize\n\n  const {\n    options,\n    _tapstart,\n    _keyboard\n  } = that;\n\n  _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"]([options.wrapper, options.element], 'mousedown', _tapstart);\n\n  _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"]([options.wrapper, options.element], 'touchstart', _tapstart, {\n    passive: false\n  });\n\n  _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](document, ['keydown', 'keyup'], _keyboard);\n\n  return that;\n}\n\n//# sourceURL=webpack://Pickr/./src/js/libs/moveable.js?");

/***/ }),

/***/ "./src/js/libs/nanopop.js":
/*!********************************!*\
  !*** ./src/js/libs/nanopop.js ***!
  \********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Nanopop; });\n/**\r\n * Micro positioning-engine\r\n * @param el\r\n * @param reference\r\n * @param pos\r\n * @param padding\r\n * @returns {{update(): void}}\r\n * @constructor\r\n */\nfunction Nanopop({\n  el,\n  reference,\n  padding = 8\n}) {\n  const vBehaviour = {\n    start: 'sme',\n    middle: 'mse',\n    end: 'ems'\n  };\n  const hBehaviour = {\n    top: 'tbrl',\n    right: 'rltb',\n    bottom: 'btrl',\n    left: 'lrbt'\n  };\n\n  const getInfo = ((cache = {}) => (pos, cached = cache[pos]) => {\n    if (cached) return cached;\n    const [position, variant = 'middle'] = pos.split('-');\n    const isVertical = position === 'top' || position === 'bottom';\n    return cache[pos] = {\n      position,\n      variant,\n      isVertical\n    };\n  })();\n\n  return {\n    update(pos) {\n      const {\n        position,\n        variant,\n        isVertical\n      } = getInfo(pos);\n      const rb = reference.getBoundingClientRect();\n      const eb = el.getBoundingClientRect();\n\n      const positions = vertical => vertical ? {\n        t: rb.top - eb.height - padding,\n        b: rb.bottom + padding\n      } : {\n        r: rb.right + padding,\n        l: rb.left - eb.width - padding\n      };\n\n      const variants = vertical => vertical ? {\n        s: rb.left + rb.width - eb.width,\n        m: -eb.width / 2 + (rb.left + rb.width / 2),\n        e: rb.left\n      } : {\n        s: rb.bottom - eb.height,\n        m: rb.bottom - rb.height / 2 - eb.height / 2,\n        e: rb.bottom - rb.height\n      };\n\n      const leastApplied = {};\n\n      function apply(bevs, vars, styleprop) {\n        const vertical = styleprop === 'top';\n        const adder = vertical ? eb.height : eb.width;\n        const win = window[vertical ? 'innerHeight' : 'innerWidth'];\n\n        for (const ch of bevs) {\n          const v = vars[ch];\n          const sv = leastApplied[styleprop] = \"\".concat(v, \"px\");\n\n          if (v > 0 && v + adder < win) {\n            el.style[styleprop] = sv;\n            return true;\n          }\n        }\n\n        return false;\n      }\n\n      for (const rot of [isVertical, !isVertical]) {\n        const v2Ok = apply(hBehaviour[position], positions(rot), rot ? 'top' : 'left');\n        const v1Ok = apply(vBehaviour[variant], variants(rot), rot ? 'left' : 'top');\n\n        if (v2Ok && v1Ok) {\n          return;\n        }\n      }\n\n      el.style.left = leastApplied.left;\n      el.style.top = leastApplied.top;\n    }\n\n  };\n}\n\n//# sourceURL=webpack://Pickr/./src/js/libs/nanopop.js?");

/***/ }),

/***/ "./src/js/libs/selectable.js":
/*!***********************************!*\
  !*** ./src/js/libs/selectable.js ***!
  \***********************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"default\", function() { return Selectable; });\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ../utils/utils */ \"./src/js/utils/utils.js\");\n\nfunction Selectable(opt = {}) {\n  opt = Object.assign({\n    onchange: () => 0,\n    className: '',\n    elements: []\n  }, opt);\n\n  const onTap = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](opt.elements, 'click', evt => {\n    opt.elements.forEach(e => e.classList[evt.target === e ? 'add' : 'remove'](opt.className));\n    opt.onchange(evt);\n  });\n\n  return {\n    destroy: () => _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"off\"](...onTap)\n  };\n}\n\n//# sourceURL=webpack://Pickr/./src/js/libs/selectable.js?");

/***/ }),

/***/ "./src/js/pickr.js":
/*!*************************!*\
  !*** ./src/js/pickr.js ***!
  \*************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n/* harmony import */ var _package__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../../package */ \"./package.json\");\nvar _package__WEBPACK_IMPORTED_MODULE_1___namespace = /*#__PURE__*/__webpack_require__.t(/*! ../../package */ \"./package.json\", 1);\n/* harmony import */ var _utils_color__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! ./utils/color */ \"./src/js/utils/color.js\");\n/* harmony import */ var _utils_hsvacolor__WEBPACK_IMPORTED_MODULE_3__ = __webpack_require__(/*! ./utils/hsvacolor */ \"./src/js/utils/hsvacolor.js\");\n/* harmony import */ var _libs_moveable__WEBPACK_IMPORTED_MODULE_4__ = __webpack_require__(/*! ./libs/moveable */ \"./src/js/libs/moveable.js\");\n/* harmony import */ var _libs_selectable__WEBPACK_IMPORTED_MODULE_5__ = __webpack_require__(/*! ./libs/selectable */ \"./src/js/libs/selectable.js\");\n/* harmony import */ var _libs_nanopop__WEBPACK_IMPORTED_MODULE_6__ = __webpack_require__(/*! ./libs/nanopop */ \"./src/js/libs/nanopop.js\");\n/* harmony import */ var _template__WEBPACK_IMPORTED_MODULE_7__ = __webpack_require__(/*! ./template */ \"./src/js/template.js\");\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n\n\n\n\n\n\n\n\n\nclass Pickr {\n  // Will be used to prevent specific actions during initilization\n  // If the current color value should be recalculated\n  // Current and last color for comparison\n  // Evenlistener name: [callbacks]\n  constructor(opt) {\n    _defineProperty(this, \"_initializingActive\", true);\n\n    _defineProperty(this, \"_recalc\", true);\n\n    _defineProperty(this, \"_color\", Object(_utils_hsvacolor__WEBPACK_IMPORTED_MODULE_3__[\"HSVaColor\"])());\n\n    _defineProperty(this, \"_lastColor\", Object(_utils_hsvacolor__WEBPACK_IMPORTED_MODULE_3__[\"HSVaColor\"])());\n\n    _defineProperty(this, \"_swatchColors\", []);\n\n    _defineProperty(this, \"_eventListener\", {\n      init: [],\n      save: [],\n      hide: [],\n      show: [],\n      clear: [],\n      change: [],\n      changestop: [],\n      cancel: [],\n      swatchselect: []\n    });\n\n    // Assign default values\n    this.options = opt = Object.assign({\n      appClass: \"wubbalubbadubdub\",\n      theme: 'classic',\n      useAsButton: false,\n      padding: 8,\n      disabled: false,\n      comparison: true,\n      closeOnScroll: false,\n      outputPrecision: 0,\n      lockOpacity: false,\n      autoReposition: true,\n      container: 'body',\n      components: {\n        interaction: {}\n      },\n      strings: {},\n      swatches: null,\n      inline: false,\n      sliders: null,\n      default: '#42445a',\n      defaultRepresentation: null,\n      position: 'bottom-middle',\n      adjustableNumbers: true,\n      showAlways: false,\n      closeWithKey: 'Escape'\n    }, opt);\n    const {\n      swatches,\n      components,\n      theme,\n      sliders,\n      lockOpacity,\n      padding\n    } = opt;\n\n    if (['nano', 'monolith'].includes(theme) && !sliders) {\n      opt.sliders = 'h';\n    } // Check interaction section\n\n\n    if (!components.interaction) {\n      components.interaction = {};\n    } // Overwrite palette if preview, opacity or hue are true\n\n\n    const {\n      preview,\n      opacity,\n      hue,\n      palette\n    } = components;\n    components.opacity = !lockOpacity && opacity;\n    components.palette = palette || preview || opacity || hue; // Initialize picker\n\n    this._preBuild();\n\n    this._buildComponents();\n\n    this._bindEvents();\n\n    this._finalBuild(); // Append pre-defined swatch colors\n\n\n    if (swatches && swatches.length) {\n      swatches.forEach(color => this.addSwatch(color));\n    } // Initialize positioning engine\n\n\n    const {\n      button,\n      app\n    } = this._root;\n    this._nanopop = Object(_libs_nanopop__WEBPACK_IMPORTED_MODULE_6__[\"default\"])({\n      reference: button,\n      padding,\n      el: app\n    }); // Initialize accessibility\n\n    button.setAttribute('role', 'button');\n    button.setAttribute('aria-label', 'toggle color picker dialog'); // Initilization is finish, pickr is visible and ready for usage\n\n    const that = this;\n    requestAnimationFrame(function cb() {\n      if (!app.offsetWidth && app.parentElement !== opt.container) {\n        return requestAnimationFrame(cb);\n      } // Apply default color\n\n\n      that.setColor(opt.default);\n\n      that._rePositioningPicker(); // Initialize color representation\n\n\n      if (opt.defaultRepresentation) {\n        that._representation = opt.defaultRepresentation;\n        that.setColorRepresentation(that._representation);\n      } // Show pickr if locked\n\n\n      if (opt.showAlways) {\n        that.show();\n      } // Initialization is done - pickr is usable, fire init event\n\n\n      that._initializingActive = false;\n\n      that._emit('init');\n    });\n  } // Does only the absolutly basic thing to initialize the components\n\n\n  _preBuild() {\n    const opt = this.options; // Resolve elements\n\n    for (const type of ['el', 'container']) {\n      opt[type] = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"resolveElement\"](opt[type]);\n    } // Create element and append it to body to\n    // prevent initialization errors\n\n\n    this._root = Object(_template__WEBPACK_IMPORTED_MODULE_7__[\"default\"])(opt); // Check if a custom button is used\n\n    if (opt.useAsButton) {\n      this._root.button = opt.el; // Replace button with customized button\n    }\n\n    opt.container.appendChild(this._root.root);\n  }\n\n  _finalBuild() {\n    const opt = this.options;\n    const root = this._root; // Remove from body\n\n    opt.container.removeChild(root.root);\n\n    if (opt.inline) {\n      const parent = opt.el.parentElement;\n\n      if (opt.el.nextSibling) {\n        parent.insertBefore(root.app, opt.el.nextSibling);\n      } else {\n        parent.appendChild(root.app);\n      }\n    } else {\n      opt.container.appendChild(root.app);\n    } // Don't replace the the element if a custom button is used\n\n\n    if (!opt.useAsButton) {\n      // Replace element with actual color-picker\n      opt.el.parentNode.replaceChild(root.root, opt.el);\n    } else if (opt.inline) {\n      opt.el.remove();\n    } // Check if it should be immediatly disabled\n\n\n    if (opt.disabled) {\n      this.disable();\n    } // Check if color comparison is disabled, if yes - remove transitions so everything keeps smoothly\n\n\n    if (!opt.comparison) {\n      root.button.style.transition = 'none';\n\n      if (!opt.useAsButton) {\n        root.preview.lastColor.style.transition = 'none';\n      }\n    }\n\n    this.hide();\n  }\n\n  _buildComponents() {\n    // Instance reference\n    const inst = this;\n    const cs = this.options.components;\n    const sliders = (inst.options.sliders || 'v').repeat(2);\n    const [so, sh] = sliders.match(/^[vh]+$/g) ? sliders : []; // Re-assign if null\n\n    const getColor = () => this._color || (this._color = this._lastColor.clone());\n\n    const components = {\n      palette: Object(_libs_moveable__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n        element: inst._root.palette.picker,\n        wrapper: inst._root.palette.palette,\n        onstop: () => inst._emit('changestop', inst),\n\n        onchange(x, y) {\n          if (!cs.palette) return;\n          const color = getColor();\n          const {\n            _root,\n            options\n          } = inst; // Update the input field only if the user is currently not typing\n\n          if (inst._recalc) {\n            const zoom = document.documentElement.clientWidth / window.innerWidth;\n            x = x * zoom;\n            y = y * zoom; // Calculate saturation based on the position\n\n            color.s = x * 100; // Calculate the value\n\n            color.v = 100 - y * 100; // Prevent falling under zero\n\n            color.v < 0 ? color.v = 0 : 0;\n\n            inst._updateOutput();\n          } // Set picker and gradient color\n\n\n          const cssRGBaString = color.toRGBA().toString(0);\n          this.element.style.background = cssRGBaString;\n          this.wrapper.style.background = \"\\n                        linear-gradient(to top, rgba(0, 0, 0, \".concat(color.a, \"), transparent),\\n                        linear-gradient(to left, hsla(\").concat(color.h, \", 100%, 50%, \").concat(color.a, \"), rgba(255, 255, 255, \").concat(color.a, \"))\\n                    \"); // Check if color is locked\n\n          if (!options.comparison) {\n            _root.button.style.color = cssRGBaString;\n          } else {\n            if (!options.useAsButton && !inst._lastColor) {\n              _root.preview.lastColor.style.color = cssRGBaString;\n            }\n          } // Check if there's a swatch which color matches the current one\n\n\n          const hexa = color.toHEXA().toString();\n\n          for (const {\n            el,\n            color\n          } of inst._swatchColors) {\n            el.classList[hexa === color.toHEXA().toString() ? 'add' : 'remove']('pcr-active');\n          } // Change current color\n\n\n          _root.preview.currentColor.style.color = cssRGBaString;\n\n          if (!inst.options.comparison) {\n            // If the user changes the color, remove the cleared icon\n            _root.button.classList.remove('clear');\n          }\n        }\n\n      }),\n      hue: Object(_libs_moveable__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n        lock: sh === 'v' ? 'h' : 'v',\n        element: inst._root.hue.picker,\n        wrapper: inst._root.hue.slider,\n        onstop: () => inst._emit('changestop', inst),\n\n        onchange(v) {\n          if (!cs.hue || !cs.palette) return;\n          const color = getColor(); // Calculate hue\n\n          const zoom = document.documentElement.clientWidth / window.innerWidth;\n          console.log('v hue', v, zoom);\n\n          if (inst._recalc) {\n            color.h = v * zoom * 360;\n          } // Update color\n\n\n          this.element.style.backgroundColor = \"hsl(\".concat(color.h, \", 100%, 50%)\");\n          components.palette.trigger();\n        }\n\n      }),\n      opacity: Object(_libs_moveable__WEBPACK_IMPORTED_MODULE_4__[\"default\"])({\n        lock: so === 'v' ? 'h' : 'v',\n        element: inst._root.opacity.picker,\n        wrapper: inst._root.opacity.slider,\n        onstop: () => inst._emit('changestop', inst),\n\n        onchange(v) {\n          if (!cs.opacity || !cs.palette) return;\n          const color = getColor(); // Calculate opacity\n\n          const zoom = document.documentElement.clientWidth / window.innerWidth;\n          console.log('v opacity', v, zoom);\n\n          if (inst._recalc) {\n            color.a = Math.round(v * zoom * 1e2) / 100;\n          } // Update color\n\n\n          this.element.style.background = \"rgba(0, 0, 0, \".concat(color.a, \")\");\n          components.palette.trigger();\n        }\n\n      }),\n      selectable: Object(_libs_selectable__WEBPACK_IMPORTED_MODULE_5__[\"default\"])({\n        elements: inst._root.interaction.options,\n        className: 'active',\n\n        onchange(e) {\n          inst._representation = e.target.getAttribute('data-type').toUpperCase();\n          inst._recalc && inst._updateOutput();\n        }\n\n      })\n    };\n    this._components = components;\n  }\n\n  _bindEvents() {\n    const {\n      _root,\n      options\n    } = this;\n    const eventBindings = [// Clear color\n    _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](_root.interaction.clear, 'click', () => this._clearColor()), // Select last color on click\n    _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"]([_root.interaction.cancel, _root.preview.lastColor], 'click', () => {\n      this._emit('cancel', this);\n\n      this.setHSVA(...(this._lastColor || this._color).toHSVA(), true);\n    }), // Save color\n    _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](_root.interaction.save, 'click', () => {\n      !this.applyColor() && !options.showAlways && this.hide();\n    }), _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](_root.interaction.result, ['keyup', 'input'], e => {\n      // Fire listener if initialization is finish and changed color was valid\n      if (this.setColor(e.target.value, true) && !this._initializingActive) {\n        this._emit('change', this._color);\n      }\n\n      e.stopImmediatePropagation();\n    }), // Detect user input and disable auto-recalculation\n    _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](_root.interaction.result, ['focus', 'blur'], e => {\n      this._recalc = e.type === 'blur';\n      this._recalc && this._updateOutput();\n    }), // Cancel input detection on color change\n    _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"]([_root.palette.palette, _root.palette.picker, _root.hue.slider, _root.hue.picker, _root.opacity.slider, _root.opacity.picker], ['mousedown', 'touchstart'], () => this._recalc = true)]; // Provide hiding / showing abilities only if showAlways is false\n\n    if (!options.showAlways) {\n      const ck = options.closeWithKey;\n      eventBindings.push( // Save and hide / show picker\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](_root.button, 'click', () => this.isOpen() ? this.hide() : this.show()), // Close with escape key\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](document, 'keyup', e => this.isOpen() && (e.key === ck || e.code === ck) && this.hide()), // Cancel selecting if the user taps behind the color picker\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](document, ['touchstart', 'mousedown'], e => {\n        if (this.isOpen() && !_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"eventPath\"](e).some(el => el === _root.app || el === _root.button)) {\n          this.hide();\n        }\n      }, {\n        capture: true\n      }));\n    } // Make input adjustable if enabled\n\n\n    if (options.adjustableNumbers) {\n      const ranges = {\n        rgba: [255, 255, 255, 1],\n        hsva: [360, 100, 100, 1],\n        hsla: [360, 100, 100, 1],\n        cmyk: [100, 100, 100, 100]\n      };\n\n      _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"adjustableInputNumbers\"](_root.interaction.result, (o, step, index) => {\n        const range = ranges[this.getColorRepresentation().toLowerCase()];\n\n        if (range) {\n          const max = range[index]; // Calculate next reasonable number\n\n          const nv = o + (max >= 100 ? step * 1000 : step); // Apply range of zero up to max, fix floating-point issues\n\n          return nv <= 0 ? 0 : Number((nv < max ? nv : max).toPrecision(3));\n        }\n\n        return o;\n      });\n    }\n\n    if (options.autoReposition && !options.inline) {\n      let timeout = null;\n      const that = this; // Re-calc position on window resize, scroll and wheel\n\n      eventBindings.push(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](window, ['scroll', 'resize'], () => {\n        if (that.isOpen()) {\n          if (options.closeOnScroll) {\n            that.hide();\n          }\n\n          if (timeout === null) {\n            timeout = setTimeout(() => timeout = null, 100); // Update position on every frame\n\n            requestAnimationFrame(function rs() {\n              that._rePositioningPicker();\n\n              timeout !== null && requestAnimationFrame(rs);\n            });\n          } else {\n            clearTimeout(timeout);\n            timeout = setTimeout(() => timeout = null, 100);\n          }\n        }\n      }, {\n        capture: true\n      }));\n    } // Save bindings\n\n\n    this._eventBindings = eventBindings;\n  }\n\n  _rePositioningPicker() {\n    const {\n      options\n    } = this; // No repositioning needed if inline\n\n    if (!options.inline) {\n      const {\n        app\n      } = this._root;\n\n      if (matchMedia('(max-width: 576px)').matches) {\n        Object.assign(app.style, {\n          margin: 'auto',\n          height: \"\".concat(app.getBoundingClientRect().height, \"px\"),\n          top: 0,\n          bottom: 0,\n          left: 0,\n          right: 0\n        });\n      } else {\n        Object.assign(app.style, {\n          margin: null,\n          right: null,\n          top: null,\n          bottom: null,\n          left: null,\n          height: null\n        });\n\n        this._nanopop.update(options.position);\n      }\n    }\n  }\n\n  _updateOutput() {\n    const {\n      _root,\n      _color,\n      options\n    } = this; // Check if component is present\n\n    if (_root.interaction.type()) {\n      // Construct function name and call if present\n      const method = \"to\".concat(_root.interaction.type().getAttribute('data-type'));\n      _root.interaction.result.value = typeof _color[method] === 'function' ? _color[method]().toString(options.outputPrecision) : '';\n    } // Fire listener if initialization is finish\n\n\n    if (!this._initializingActive && this._recalc) {\n      this._emit('change', _color);\n    }\n  }\n\n  _clearColor(silent = false) {\n    const {\n      _root,\n      options\n    } = this; // Change only the button color if it isn't customized\n\n    if (!options.useAsButton) {\n      _root.button.style.color = 'rgba(0, 0, 0, 0.15)';\n    }\n\n    _root.button.classList.add('clear');\n\n    if (!options.showAlways) {\n      this.hide();\n    }\n\n    this._lastColor = null;\n\n    if (!this._initializingActive && !silent) {\n      // Fire listener\n      this._emit('save', null);\n\n      this._emit('clear', this);\n    }\n  }\n\n  _parseLocalColor(str) {\n    const {\n      values,\n      type,\n      a\n    } = Object(_utils_color__WEBPACK_IMPORTED_MODULE_2__[\"parseToHSVA\"])(str);\n    const {\n      lockOpacity\n    } = this.options;\n    const alphaMakesAChange = a !== undefined && a !== 1; // If no opacity is applied, add undefined at the very end which gets\n    // set to 1 in setHSVA\n\n    if (values && values.length === 3) {\n      values[3] = undefined;\n    }\n\n    return {\n      values: !values || lockOpacity && alphaMakesAChange ? null : values,\n      type\n    };\n  }\n\n  _emit(event, ...args) {\n    this._eventListener[event].forEach(cb => cb(...args, this));\n  }\n\n  on(event, cb) {\n    // Validate\n    if (typeof cb === 'function' && typeof event === 'string' && event in this._eventListener) {\n      this._eventListener[event].push(cb);\n    }\n\n    return this;\n  }\n\n  off(event, cb) {\n    const callBacks = this._eventListener[event];\n\n    if (callBacks) {\n      const index = callBacks.indexOf(cb);\n\n      if (~index) {\n        callBacks.splice(index, 1);\n      }\n    }\n\n    return this;\n  }\n  /**\n   * Appends a color to the swatch palette\n   * @param color\n   * @returns {boolean}\n   */\n\n\n  addSwatch(color) {\n    const {\n      values\n    } = this._parseLocalColor(color);\n\n    if (values) {\n      const {\n        _swatchColors,\n        _root\n      } = this;\n      const color = Object(_utils_hsvacolor__WEBPACK_IMPORTED_MODULE_3__[\"HSVaColor\"])(...values); // Create new swatch HTMLElement\n\n      const el = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"createElementFromString\"](\"<button type=\\\"button\\\" style=\\\"color: \".concat(color.toRGBA().toString(0), \"\\\" aria-label=\\\"color swatch\\\"/>\")); // Append element and save swatch data\n\n\n      _root.swatches.appendChild(el);\n\n      _swatchColors.push({\n        el,\n        color\n      }); // Bind event\n\n\n      this._eventBindings.push(_utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"on\"](el, 'click', () => {\n        this.setHSVA(...color.toHSVA(), true);\n\n        this._emit('swatchselect', color);\n\n        this._emit('change', color);\n      }));\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Removes a swatch color by it's index\n   * @param index\n   * @returns {boolean}\n   */\n\n\n  removeSwatch(index) {\n    const swatchColor = this._swatchColors[index]; // Check swatch data\n\n    if (swatchColor) {\n      const {\n        el\n      } = swatchColor; // Remove HTML child and swatch data\n\n      this._root.swatches.removeChild(el);\n\n      this._swatchColors.splice(index, 1);\n\n      return true;\n    }\n\n    return false;\n  }\n\n  applyColor(silent = false) {\n    const {\n      preview,\n      button\n    } = this._root; // Change preview and current color\n\n    const cssRGBaString = this._color.toRGBA().toString(0);\n\n    preview.lastColor.style.color = cssRGBaString; // Change only the button color if it isn't customized\n\n    if (!this.options.useAsButton) {\n      button.style.color = cssRGBaString;\n    } // User changed the color so remove the clear clas\n\n\n    button.classList.remove('clear'); // Save last color\n\n    this._lastColor = this._color.clone(); // Fire listener\n\n    if (!this._initializingActive && !silent) {\n      this._emit('save', this._color);\n    }\n\n    return this;\n  }\n  /**\n   * Destroy's all functionalitys\n   */\n\n\n  destroy() {\n    this._eventBindings.forEach(args => _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"off\"](...args));\n\n    Object.keys(this._components).forEach(key => this._components[key].destroy());\n  }\n  /**\n   * Destroy's all functionalitys and removes\n   * the pickr element.\n   */\n\n\n  destroyAndRemove() {\n    this.destroy();\n    const {\n      root,\n      app\n    } = this._root; // Remove element\n\n    if (root.parentElement) {\n      root.parentElement.removeChild(root);\n    } // remove .pcr-app\n\n\n    app.parentElement.removeChild(app); // There are references to various DOM elements stored in the pickr instance\n    // This cleans all of them to avoid detached DOMs\n\n    Object.keys(this).forEach(key => this[key] = null);\n  }\n  /**\n   * Hides the color-picker ui.\n   */\n\n\n  hide() {\n    this._root.app.classList.remove('visible');\n\n    this._emit('hide', this);\n\n    return this;\n  }\n  /**\n   * Shows the color-picker ui.\n   */\n\n\n  show() {\n    if (!this.options.disabled) {\n      this._root.app.classList.add('visible');\n\n      this._rePositioningPicker();\n\n      this._emit('show', this);\n    }\n\n    return this;\n  }\n  /**\n   * @return {boolean} If the color picker is currently open\n   */\n\n\n  isOpen() {\n    return this._root.app.classList.contains('visible');\n  }\n  /**\n   * Set a specific color.\n   * @param h Hue\n   * @param s Saturation\n   * @param v Value\n   * @param a Alpha channel (0 - 1)\n   * @param silent If the button should not change the color\n   * @return boolean if the color has been accepted\n   */\n\n\n  setHSVA(h = 360, s = 0, v = 0, a = 1, silent = false) {\n    // Deactivate color calculation\n    const recalc = this._recalc; // Save state\n\n    this._recalc = false; // Validate input\n\n    if (h < 0 || h > 360 || s < 0 || s > 100 || v < 0 || v > 100 || a < 0 || a > 1) {\n      return false;\n    } // Override current color and re-active color calculation\n\n\n    this._color = Object(_utils_hsvacolor__WEBPACK_IMPORTED_MODULE_3__[\"HSVaColor\"])(h, s, v, a); // Update slider and palette\n\n    const {\n      hue,\n      opacity,\n      palette\n    } = this._components;\n    hue.update(h / 360);\n    opacity.update(a);\n    palette.update(s / 100, 1 - v / 100); // Check if call is silent\n\n    if (!silent) {\n      this.applyColor();\n    } // Update output if recalculation is enabled\n\n\n    if (recalc) {\n      this._updateOutput();\n    } // Restore old state\n\n\n    this._recalc = recalc;\n    return true;\n  }\n  /**\n   * Tries to parse a string which represents a color.\n   * Examples: #fff\n   *           rgb 10 10 200\n   *           hsva 10 20 5 0.5\n   * @param string\n   * @param silent\n   */\n\n\n  setColor(string, silent = false) {\n    // Check if null\n    if (string === null) {\n      this._clearColor(silent);\n\n      return true;\n    }\n\n    const {\n      values,\n      type\n    } = this._parseLocalColor(string); // Check if color is ok\n\n\n    if (values) {\n      // Change selected color format\n      const utype = type.toUpperCase();\n      const {\n        options\n      } = this._root.interaction;\n      const target = options.find(el => el.getAttribute('data-type') === utype); // Auto select only if not hidden\n\n      if (target && !target.hidden) {\n        for (const el of options) {\n          el.classList[el === target ? 'add' : 'remove']('active');\n        }\n      }\n\n      this.setColorRepresentation(utype);\n      return this.setHSVA(...values, silent);\n    }\n\n    return false;\n  }\n  /**\n   * Changes the color _representation.\n   * Allowed values are HEX, RGB, HSV, HSL and CMYK\n   * @param type\n   * @returns {boolean} if the selected type was valid.\n   */\n\n\n  setColorRepresentation(type) {\n    // Force uppercase to allow a case-sensitiv comparison\n    type = type.toUpperCase(); // Find button with given type and trigger click event\n\n    return !!this._root.interaction.options.find(v => v.getAttribute('data-type').startsWith(type) && !v.click());\n  }\n  /**\n   * Returns the current color representaion. See setColorRepresentation\n   * @returns {*}\n   */\n\n\n  getColorRepresentation() {\n    return this._representation;\n  }\n  /**\n   * @returns HSVaColor Current HSVaColor object.\n   */\n\n\n  getColor() {\n    return this._color;\n  }\n  /**\n   * Returns the currently selected color.\n   * @returns {{a, toHSVA, toHEXA, s, v, h, clone, toCMYK, toHSLA, toRGBA}}\n   */\n\n\n  getSelectedColor() {\n    return this._lastColor;\n  }\n  /**\n   * @returns The root HTMLElement with all his components.\n   */\n\n\n  getRoot() {\n    return this._root;\n  }\n  /**\n   * Disable pickr\n   */\n\n\n  disable() {\n    this.hide();\n    this.options.disabled = true;\n\n    this._root.button.classList.add('disabled');\n\n    return this;\n  }\n  /**\n   * Enable pickr\n   */\n\n\n  enable() {\n    this.options.disabled = false;\n\n    this._root.button.classList.remove('disabled');\n\n    return this;\n  }\n\n} // Expose pickr utils\n\n\nPickr.utils = _utils_utils__WEBPACK_IMPORTED_MODULE_0__; // Expose libraries for easier integration in things build on top of it\n\nPickr.libs = {\n  HSVaColor: _utils_hsvacolor__WEBPACK_IMPORTED_MODULE_3__[\"HSVaColor\"],\n  Moveable: _libs_moveable__WEBPACK_IMPORTED_MODULE_4__[\"default\"],\n  Nanopop: _libs_nanopop__WEBPACK_IMPORTED_MODULE_6__[\"default\"],\n  Selectable: _libs_selectable__WEBPACK_IMPORTED_MODULE_5__[\"default\"]\n}; // Create instance via method\n\nPickr.create = options => new Pickr(options); // Assign version and export\n\n\nPickr.version = _package__WEBPACK_IMPORTED_MODULE_1__[\"version\"];\n/* harmony default export */ __webpack_exports__[\"default\"] = (Pickr);\n\n//# sourceURL=webpack://Pickr/./src/js/pickr.js?");

/***/ }),

/***/ "./src/js/template.js":
/*!****************************!*\
  !*** ./src/js/template.js ***!
  \****************************/
/*! exports provided: default */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony import */ var _utils_utils__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./utils/utils */ \"./src/js/utils/utils.js\");\n\n/* harmony default export */ __webpack_exports__[\"default\"] = (({\n  components: c,\n  strings: s,\n  useAsButton,\n  inline,\n  appClass,\n  theme,\n  lockOpacity: lo\n}) => {\n  const hidden = con => con ? '' : 'style=\"display:none\" hidden';\n\n  const root = _utils_utils__WEBPACK_IMPORTED_MODULE_0__[\"createFromTemplate\"](\"\\n      <div :ref=\\\"root\\\" class=\\\"pickr\\\">\\n\\n        \".concat(useAsButton ? '' : '<button type=\"button\" :ref=\"button\" class=\"pcr-button\"></button>', \"\\n\\n        <div :ref=\\\"app\\\" class=\\\"pcr-app \").concat(appClass || '', \"\\\" data-theme=\\\"\").concat(theme, \"\\\" \").concat(inline ? 'style=\"position: unset\"' : '', \" aria-label=\\\"color picker dialog\\\" role=\\\"window\\\">\\n          <div class=\\\"pcr-selection\\\" \").concat(hidden(c.palette), \">\\n            <div :obj=\\\"preview\\\" class=\\\"pcr-color-preview\\\" \").concat(hidden(c.preview), \">\\n              <button type=\\\"button\\\" :ref=\\\"lastColor\\\" class=\\\"pcr-last-color\\\" aria-label=\\\"use previous color\\\"></button>\\n              <div :ref=\\\"currentColor\\\" class=\\\"pcr-current-color\\\"></div>\\n            </div>\\n\\n            <div :obj=\\\"palette\\\" class=\\\"pcr-color-palette\\\">\\n              <div :ref=\\\"picker\\\" class=\\\"pcr-picker\\\"></div>\\n              <div :ref=\\\"palette\\\" class=\\\"pcr-palette\\\" tabindex=\\\"0\\\" aria-label=\\\"color selection area\\\" role=\\\"widget\\\"></div>\\n            </div>\\n\\n            <div :obj=\\\"hue\\\" class=\\\"pcr-color-chooser\\\" \").concat(hidden(c.hue), \">\\n              <div :ref=\\\"picker\\\" class=\\\"pcr-picker\\\"></div>\\n              <div :ref=\\\"slider\\\" class=\\\"pcr-hue pcr-slider\\\" tabindex=\\\"0\\\" aria-label=\\\"hue selection slider\\\" role=\\\"widget\\\"></div>\\n            </div>\\n\\n            <div :obj=\\\"opacity\\\" class=\\\"pcr-color-opacity\\\" \").concat(hidden(c.opacity), \">\\n              <div :ref=\\\"picker\\\" class=\\\"pcr-picker\\\"></div>\\n              <div :ref=\\\"slider\\\" class=\\\"pcr-opacity pcr-slider\\\" tabindex=\\\"0\\\" aria-label=\\\"opacity selection slider\\\" role=\\\"widget\\\"></div>\\n            </div>\\n          </div>\\n\\n          <div class=\\\"pcr-swatches \").concat(c.palette ? '' : 'pcr-last', \"\\\" :ref=\\\"swatches\\\"></div> \\n\\n          <div :obj=\\\"interaction\\\" class=\\\"pcr-interaction\\\" \").concat(hidden(Object.keys(c.interaction).length), \">\\n            <input :ref=\\\"result\\\" class=\\\"pcr-result\\\" type=\\\"text\\\" spellcheck=\\\"false\\\" \").concat(hidden(c.interaction.input), \">\\n\\n            <input :arr=\\\"options\\\" class=\\\"pcr-type\\\" data-type=\\\"HEXA\\\" value=\\\"\").concat(lo ? 'HEX' : 'HEXA', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.hex), \">\\n            <input :arr=\\\"options\\\" class=\\\"pcr-type\\\" data-type=\\\"RGBA\\\" value=\\\"\").concat(lo ? 'RGB' : 'RGBA', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.rgba), \">\\n            <input :arr=\\\"options\\\" class=\\\"pcr-type\\\" data-type=\\\"HSLA\\\" value=\\\"\").concat(lo ? 'HSL' : 'HSLA', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.hsla), \">\\n            <input :arr=\\\"options\\\" class=\\\"pcr-type\\\" data-type=\\\"HSVA\\\" value=\\\"\").concat(lo ? 'HSV' : 'HSVA', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.hsva), \">\\n            <input :arr=\\\"options\\\" class=\\\"pcr-type\\\" data-type=\\\"CMYK\\\" value=\\\"CMYK\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.cmyk), \">\\n\\n            <input :ref=\\\"save\\\" class=\\\"pcr-save\\\" value=\\\"\").concat(s.save || 'Save', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.save), \" aria-label=\\\"save and exit\\\">\\n            <input :ref=\\\"cancel\\\" class=\\\"pcr-cancel\\\" value=\\\"\").concat(s.cancel || 'Cancel', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.cancel), \" aria-label=\\\"cancel and exit\\\">\\n            <input :ref=\\\"clear\\\" class=\\\"pcr-clear\\\" value=\\\"\").concat(s.clear || 'Clear', \"\\\" type=\\\"button\\\" \").concat(hidden(c.interaction.clear), \" aria-label=\\\"clear and exit\\\">\\n          </div>\\n        </div>\\n      </div>\\n    \"));\n\n  const int = root.interaction; // Select option which is not hidden\n\n  int.options.find(o => !o.hidden && !o.classList.add('active')); // Create method to find currenlty active option\n\n  int.type = () => int.options.find(e => e.classList.contains('active'));\n\n  return root;\n});\n\n//# sourceURL=webpack://Pickr/./src/js/template.js?");

/***/ }),

/***/ "./src/js/utils/color.js":
/*!*******************************!*\
  !*** ./src/js/utils/color.js ***!
  \*******************************/
/*! exports provided: hsvToRgb, hsvToHex, hsvToCmyk, hsvToHsl, parseToHSVA */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsvToRgb\", function() { return hsvToRgb; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsvToHex\", function() { return hsvToHex; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsvToCmyk\", function() { return hsvToCmyk; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"hsvToHsl\", function() { return hsvToHsl; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"parseToHSVA\", function() { return parseToHSVA; });\n// Shorthands\nconst {\n  min,\n  max,\n  floor,\n  round\n} = Math;\n/**\n * Tries to convert a color name to rgb/a hex representation\n * @param name\n * @returns {string | CanvasGradient | CanvasPattern}\n */\n\nfunction standardizeColor(name) {\n  // Since invalid color's will be parsed as black, filter them out\n  if (name.toLowerCase() === 'black') {\n    return '#000';\n  }\n\n  const ctx = document.createElement('canvas').getContext('2d');\n  ctx.fillStyle = name;\n  return ctx.fillStyle === '#000' ? null : ctx.fillStyle;\n}\n/**\n * Convert HSV spectrum to RGB.\n * @param h Hue\n * @param s Saturation\n * @param v Value\n * @returns {number[]} Array with rgb values.\n */\n\n\nfunction hsvToRgb(h, s, v) {\n  h = h / 360 * 6;\n  s /= 100;\n  v /= 100;\n  const i = floor(h);\n  const f = h - i;\n  const p = v * (1 - s);\n  const q = v * (1 - f * s);\n  const t = v * (1 - (1 - f) * s);\n  const mod = i % 6;\n  const r = [v, q, p, p, t, v][mod];\n  const g = [t, v, v, q, p, p][mod];\n  const b = [p, p, t, v, v, q][mod];\n  return [r * 255, g * 255, b * 255];\n}\n/**\n * Convert HSV spectrum to Hex.\n * @param h Hue\n * @param s Saturation\n * @param v Value\n * @returns {string[]} Hex values\n */\n\nfunction hsvToHex(h, s, v) {\n  return hsvToRgb(h, s, v).map(v => round(v).toString(16).padStart(2, '0'));\n}\n/**\n * Convert HSV spectrum to CMYK.\n * @param h Hue\n * @param s Saturation\n * @param v Value\n * @returns {number[]} CMYK values\n */\n\nfunction hsvToCmyk(h, s, v) {\n  const rgb = hsvToRgb(h, s, v);\n  const r = rgb[0] / 255;\n  const g = rgb[1] / 255;\n  const b = rgb[2] / 255;\n  let k, c, m, y;\n  k = min(1 - r, 1 - g, 1 - b);\n  c = k === 1 ? 0 : (1 - r - k) / (1 - k);\n  m = k === 1 ? 0 : (1 - g - k) / (1 - k);\n  y = k === 1 ? 0 : (1 - b - k) / (1 - k);\n  return [c * 100, m * 100, y * 100, k * 100];\n}\n/**\n * Convert HSV spectrum to HSL.\n * @param h Hue\n * @param s Saturation\n * @param v Value\n * @returns {number[]} HSL values\n */\n\nfunction hsvToHsl(h, s, v) {\n  s /= 100, v /= 100;\n  const l = (2 - s) * v / 2;\n\n  if (l !== 0) {\n    if (l === 1) {\n      s = 0;\n    } else if (l < 0.5) {\n      s = s * v / (l * 2);\n    } else {\n      s = s * v / (2 - l * 2);\n    }\n  }\n\n  return [h, s * 100, l * 100];\n}\n/**\n * Convert RGB to HSV.\n * @param r Red\n * @param g Green\n * @param b Blue\n * @return {number[]} HSV values.\n */\n\nfunction rgbToHsv(r, g, b) {\n  r /= 255, g /= 255, b /= 255;\n  let h, s, v;\n  const minVal = min(r, g, b);\n  const maxVal = max(r, g, b);\n  const delta = maxVal - minVal;\n  v = maxVal;\n\n  if (delta === 0) {\n    h = s = 0;\n  } else {\n    s = delta / maxVal;\n    const dr = ((maxVal - r) / 6 + delta / 2) / delta;\n    const dg = ((maxVal - g) / 6 + delta / 2) / delta;\n    const db = ((maxVal - b) / 6 + delta / 2) / delta;\n\n    if (r === maxVal) {\n      h = db - dg;\n    } else if (g === maxVal) {\n      h = 1 / 3 + dr - db;\n    } else if (b === maxVal) {\n      h = 2 / 3 + dg - dr;\n    }\n\n    if (h < 0) {\n      h += 1;\n    } else if (h > 1) {\n      h -= 1;\n    }\n  }\n\n  return [h * 360, s * 100, v * 100];\n}\n/**\n * Convert CMYK to HSV.\n * @param c Cyan\n * @param m Magenta\n * @param y Yellow\n * @param k Key (Black)\n * @return {number[]} HSV values.\n */\n\n\nfunction cmykToHsv(c, m, y, k) {\n  c /= 100;\n  m /= 100;\n  y /= 100;\n  k /= 100;\n  const r = (1 - min(1, c * (1 - k) + k)) * 255;\n  const g = (1 - min(1, m * (1 - k) + k)) * 255;\n  const b = (1 - min(1, y * (1 - k) + k)) * 255;\n  return [...rgbToHsv(r, g, b)];\n}\n/**\n * Convert HSL to HSV.\n * @param h Hue\n * @param s Saturation\n * @param l Lightness\n * @return {number[]} HSV values.\n */\n\n\nfunction hslToHsv(h, s, l) {\n  s /= 100;\n  l /= 100;\n  s *= l < 0.5 ? l : 1 - l;\n  const ns = 2 * s / (l + s) * 100;\n  const v = (l + s) * 100;\n  return [h, ns, v];\n}\n/**\n * Convert HEX to HSV.\n * @param hex Hexadecimal string of rgb colors, can have length 3 or 6.\n * @return {number[]} HSV values.\n */\n\n\nfunction hexToHsv(hex) {\n  return rgbToHsv(...hex.match(/.{2}/g).map(v => parseInt(v, 16)));\n}\n/**\n * Try's to parse a string which represents a color to a HSV array.\n * Current supported types are cmyk, rgba, hsla and hexadecimal.\n * @param str\n * @return {*}\n */\n\n\nfunction parseToHSVA(str) {\n  // Check if string is a color-name\n  str = str.match(/^[a-zA-Z]+$/) ? standardizeColor(str) : str; // Regular expressions to match different types of color represention\n\n  const regex = {\n    cmyk: /^cmyk[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)/i,\n    rgba: /^((rgba)|rgb)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,\n    hsla: /^((hsla)|hsl)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,\n    hsva: /^((hsva)|hsv)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]+([\\d.]+)[\\D]*?([\\d.]+|$)/i,\n    hexa: /^#?(([\\dA-Fa-f]{3,4})|([\\dA-Fa-f]{6})|([\\dA-Fa-f]{8}))$/i\n  };\n  /**\n   * Takes an Array of any type, convert strings which represents\n   * a number to a number an anything else to undefined.\n   * @param array\n   * @return {*}\n   */\n\n  const numarize = array => array.map(v => /^(|\\d+)\\.\\d+|\\d+$/.test(v) ? Number(v) : undefined);\n\n  let match;\n\n  invalid: for (const type in regex) {\n    // Check if current scheme passed\n    if (!(match = regex[type].exec(str))) continue; // match[2] does only contain a truly value if rgba, hsla, or hsla got matched\n\n    const alphaValid = a => !!match[2] === (typeof a === 'number'); // Try to convert\n\n\n    switch (type) {\n      case 'cmyk':\n        {\n          const [, c, m, y, k] = numarize(match);\n          if (c > 100 || m > 100 || y > 100 || k > 100) break invalid;\n          return {\n            values: cmykToHsv(c, m, y, k),\n            type\n          };\n        }\n\n      case 'rgba':\n        {\n          const [,,, r, g, b, a] = numarize(match);\n          if (r > 255 || g > 255 || b > 255 || a < 0 || a > 1 || !alphaValid(a)) break invalid;\n          return {\n            values: [...rgbToHsv(r, g, b), a],\n            a,\n            type\n          };\n        }\n\n      case 'hexa':\n        {\n          let [, hex] = match;\n\n          if (hex.length === 4 || hex.length === 3) {\n            hex = hex.split('').map(v => v + v).join('');\n          }\n\n          const raw = hex.substring(0, 6);\n          let a = hex.substring(6); // Convert 0 - 255 to 0 - 1 for opacity\n\n          a = a ? parseInt(a, 16) / 255 : undefined;\n          return {\n            values: [...hexToHsv(raw), a],\n            a,\n            type\n          };\n        }\n\n      case 'hsla':\n        {\n          const [,,, h, s, l, a] = numarize(match);\n          if (h > 360 || s > 100 || l > 100 || a < 0 || a > 1 || !alphaValid(a)) break invalid;\n          return {\n            values: [...hslToHsv(h, s, l), a],\n            a,\n            type\n          };\n        }\n\n      case 'hsva':\n        {\n          const [,,, h, s, v, a] = numarize(match);\n          if (h > 360 || s > 100 || v > 100 || a < 0 || a > 1 || !alphaValid(a)) break invalid;\n          return {\n            values: [h, s, v, a],\n            a,\n            type\n          };\n        }\n    }\n  }\n\n  return {\n    values: null,\n    type: null\n  };\n}\n\n//# sourceURL=webpack://Pickr/./src/js/utils/color.js?");

/***/ }),

/***/ "./src/js/utils/hsvacolor.js":
/*!***********************************!*\
  !*** ./src/js/utils/hsvacolor.js ***!
  \***********************************/
/*! exports provided: HSVaColor */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"HSVaColor\", function() { return HSVaColor; });\n/* harmony import */ var _color__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! ./color */ \"./src/js/utils/color.js\");\n\n/**\n * Simple class which holds the properties\n * of the color represention model hsla (hue saturation lightness alpha)\n */\n\nfunction HSVaColor(h = 0, s = 0, v = 0, a = 1) {\n  const mapper = (original, next) => (precision = -1) => {\n    return next(~precision ? original.map(v => Number(v.toFixed(precision))) : original);\n  };\n\n  const that = {\n    h,\n    s,\n    v,\n    a,\n\n    toHSVA() {\n      const hsva = [that.h, that.s, that.v, that.a];\n      hsva.toString = mapper(hsva, arr => \"hsva(\".concat(arr[0], \", \").concat(arr[1], \"%, \").concat(arr[2], \"%, \").concat(that.a, \")\"));\n      return hsva;\n    },\n\n    toHSLA() {\n      const hsla = [...Object(_color__WEBPACK_IMPORTED_MODULE_0__[\"hsvToHsl\"])(that.h, that.s, that.v), that.a];\n      hsla.toString = mapper(hsla, arr => \"hsla(\".concat(arr[0], \", \").concat(arr[1], \"%, \").concat(arr[2], \"%, \").concat(that.a, \")\"));\n      return hsla;\n    },\n\n    toRGBA() {\n      const rgba = [...Object(_color__WEBPACK_IMPORTED_MODULE_0__[\"hsvToRgb\"])(that.h, that.s, that.v), that.a];\n      rgba.toString = mapper(rgba, arr => \"rgba(\".concat(arr[0], \", \").concat(arr[1], \", \").concat(arr[2], \", \").concat(that.a, \")\"));\n      return rgba;\n    },\n\n    toCMYK() {\n      const cmyk = Object(_color__WEBPACK_IMPORTED_MODULE_0__[\"hsvToCmyk\"])(that.h, that.s, that.v);\n      cmyk.toString = mapper(cmyk, arr => \"cmyk(\".concat(arr[0], \"%, \").concat(arr[1], \"%, \").concat(arr[2], \"%, \").concat(arr[3], \"%)\"));\n      return cmyk;\n    },\n\n    toHEXA() {\n      const hex = Object(_color__WEBPACK_IMPORTED_MODULE_0__[\"hsvToHex\"])(that.h, that.s, that.v); // Check if alpha channel make sense, convert it to 255 number space, convert\n      // to hex and pad it with zeros if needet.\n\n      const alpha = that.a >= 1 ? '' : Number((that.a * 255).toFixed(0)).toString(16).toUpperCase().padStart(2, '0');\n      alpha && hex.push(alpha);\n\n      hex.toString = () => \"#\".concat(hex.join('').toUpperCase());\n\n      return hex;\n    },\n\n    clone: () => HSVaColor(that.h, that.s, that.v, that.a)\n  };\n  return that;\n}\n\n//# sourceURL=webpack://Pickr/./src/js/utils/hsvacolor.js?");

/***/ }),

/***/ "./src/js/utils/utils.js":
/*!*******************************!*\
  !*** ./src/js/utils/utils.js ***!
  \*******************************/
/*! exports provided: on, off, createElementFromString, removeAttribute, createFromTemplate, eventPath, resolveElement, adjustableInputNumbers */
/***/ (function(module, __webpack_exports__, __webpack_require__) {

"use strict";
eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"on\", function() { return on; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"off\", function() { return off; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createElementFromString\", function() { return createElementFromString; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"removeAttribute\", function() { return removeAttribute; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"createFromTemplate\", function() { return createFromTemplate; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"eventPath\", function() { return eventPath; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"resolveElement\", function() { return resolveElement; });\n/* harmony export (binding) */ __webpack_require__.d(__webpack_exports__, \"adjustableInputNumbers\", function() { return adjustableInputNumbers; });\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nfunction _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }\n\n/**\r\n * Add event(s) to element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\nconst on = eventListener.bind(null, 'addEventListener');\n/**\r\n * Remove event(s) from element(s).\r\n * @param elements DOM-Elements\r\n * @param events Event names\r\n * @param fn Callback\r\n * @param options Optional options\r\n * @return Array passed arguments\r\n */\n\nconst off = eventListener.bind(null, 'removeEventListener');\n\nfunction eventListener(method, elements, events, fn, options = {}) {\n  // Normalize array\n  if (elements instanceof HTMLCollection || elements instanceof NodeList) {\n    elements = Array.from(elements);\n  } else if (!Array.isArray(elements)) {\n    elements = [elements];\n  }\n\n  if (!Array.isArray(events)) {\n    events = [events];\n  }\n\n  for (const el of elements) {\n    for (const ev of events) {\n      el[method](ev, fn, _objectSpread({\n        capture: false\n      }, options));\n    }\n  }\n\n  return Array.prototype.slice.call(arguments, 1);\n}\n/**\r\n * Creates an DOM-Element out of a string (Single element).\r\n * @param html HTML representing a single element\r\n * @returns {Element | null} The element.\r\n */\n\n\nfunction createElementFromString(html) {\n  const div = document.createElement('div');\n  div.innerHTML = html.trim();\n  return div.firstElementChild;\n}\n/**\r\n * Removes an attribute from a HTMLElement and returns the value.\r\n * @param el\r\n * @param name\r\n * @return {string}\r\n */\n\nfunction removeAttribute(el, name) {\n  const value = el.getAttribute(name);\n  el.removeAttribute(name);\n  return value;\n}\n/**\r\n * Creates a new html element, every element which has\r\n * a ':ref' attribute will be saved in a object (which will be returned)\r\n * where the value of ':ref' is the object-key and the value the HTMLElement.\r\n *\r\n * It's possible to create a hierarchy if you add a ':obj' attribute. Every\r\n * sibling will be added to the object which will get the name from the 'data-con' attribute.\r\n *\r\n * If you want to create an Array out of multiple elements, you can use the ':arr' attribute,\r\n * the value defines the key and all elements, which has the same parent and the same 'data-arr' attribute,\r\n * would be added to it.\r\n *\r\n * @param str - The HTML String.\r\n */\n\nfunction createFromTemplate(str) {\n  // Recursive function to resolve template\n  function resolve(element, base = {}) {\n    // Check key and container attribute\n    const con = removeAttribute(element, ':obj');\n    const key = removeAttribute(element, ':ref');\n    const subtree = con ? base[con] = {} : base; // Check and save element\n\n    key && (base[key] = element);\n\n    for (const child of Array.from(element.children)) {\n      const arr = removeAttribute(child, ':arr');\n      const sub = resolve(child, arr ? {} : subtree);\n\n      if (arr) {\n        // Check if there is already an array and add element\n        (subtree[arr] || (subtree[arr] = [])).push(Object.keys(sub).length ? sub : child);\n      }\n    }\n\n    return base;\n  }\n\n  return resolve(createElementFromString(str));\n}\n/**\r\n * Polyfill for safari & firefox for the eventPath event property.\r\n * @param evt The event object.\r\n * @return [String] event path.\r\n */\n\nfunction eventPath(evt) {\n  let path = evt.path || evt.composedPath && evt.composedPath();\n  if (path) return path;\n  let el = evt.target.parentElement;\n  path = [evt.target, el];\n\n  while (el = el.parentElement) path.push(el);\n\n  path.push(document, window);\n  return path;\n}\n/**\r\n * Resolves a HTMLElement by query.\r\n * @param val\r\n * @returns {null|Document|Element}\r\n */\n\nfunction resolveElement(val) {\n  if (val instanceof Element) {\n    return val;\n  } else if (typeof val === 'string') {\n    return val.split(/>>/g).reduce((pv, cv, ci, a) => {\n      pv = pv.querySelector(cv);\n      return ci < a.length - 1 ? pv.shadowRoot : pv;\n    }, document);\n  }\n\n  return null;\n}\n/**\r\n * Creates the ability to change numbers in an input field with the scroll-wheel.\r\n * @param el\r\n * @param mapper\r\n */\n\nfunction adjustableInputNumbers(el, mapper = v => v) {\n  function handleScroll(e) {\n    const inc = [0.001, 0.01, 0.1][Number(e.shiftKey || e.ctrlKey * 2)] * (e.deltaY < 0 ? 1 : -1);\n    let index = 0;\n    let off = el.selectionStart;\n    el.value = el.value.replace(/[\\d.]+/g, (v, i) => {\n      // Check if number is in cursor range and increase it\n      if (i <= off && i + v.length >= off) {\n        off = i;\n        return mapper(Number(v), inc, index);\n      }\n\n      index++;\n      return v;\n    });\n    el.focus();\n    el.setSelectionRange(off, off); // Prevent default and trigger input event\n\n    e.preventDefault();\n    el.dispatchEvent(new Event('input'));\n  } // Bind events\n\n\n  on(el, 'focus', () => on(window, 'wheel', handleScroll, {\n    passive: false\n  }));\n  on(el, 'blur', () => off(window, 'wheel', handleScroll));\n}\n\n//# sourceURL=webpack://Pickr/./src/js/utils/utils.js?");

/***/ })

/******/ })["default"];
});
//# sourceMappingURL=pickr.min.js.map